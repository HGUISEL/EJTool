         body = HttpTestUtils.makeBody(entityLength);
        post.setEntity(HttpTestUtils.makeBody(128));
        put.setEntity(HttpTestUtils.makeBody(128));
        trace.setEntity(HttpTestUtils.makeBody(entityLength));
        originResponse.setEntity(HttpTestUtils.makeBody(entityLength));
        originResponse.setEntity(HttpTestUtils.makeBody(entityLength));
        originResponse.setEntity(HttpTestUtils.makeBody(500));
        originResponse.setEntity(HttpTestUtils.makeBody(entityLength));
        originResponse.setEntity(HttpTestUtils.makeBody(entityLength));
        resp1.setEntity(HttpTestUtils.makeBody(entityLength));
        resp2.setEntity(HttpTestUtils.makeBody(entityLength));
        originResponse.setEntity(HttpTestUtils.makeBody(entityLength));
        put.setEntity(HttpTestUtils.makeBody(128));
        put.setEntity(HttpTestUtils.makeBody(128));
        req.setEntity(HttpTestUtils.makeBody(128));
        req.setEntity(HttpTestUtils.makeBody(128));
        originResponse.setEntity(HttpTestUtils.makeBody(50));
    /* "Some HTTP methods MUST cause a cache to invalidate an
     * entity. This is either the entity referred to by the
     * Request-URI, or by the Location or Content-Location headers (if
     * present). These methods are:
     * - PUT
     * - DELETE
     * - POST
     *
     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.9
     */
    protected void testUnsafeOperationInvalidatesCacheForThatUri(
            HttpRequest unsafeReq) throws Exception, IOException {
        HttpRequest req1 = new BasicHttpRequest("GET", "/", HTTP_1_1);
        HttpResponse resp1 = make200Response();
        resp1.setHeader("Cache-Control","public, max-age=3600");
        backendExpectsAnyRequest().andReturn(resp1);
        HttpResponse resp2 = new BasicHttpResponse(HTTP_1_1, HttpStatus.SC_NO_CONTENT, "No Content");
        backendExpectsAnyRequest().andReturn(resp2);
        HttpRequest req3 = new BasicHttpRequest("GET", "/", HTTP_1_1);
        HttpResponse resp3 = make200Response();
        resp3.setHeader("Cache-Control","public, max-age=3600");
        // this origin request MUST happen due to invalidation
        backendExpectsAnyRequest().andReturn(resp3);
        replayMocks();
        impl.execute(host, req1);
        impl.execute(host, unsafeReq);
        impl.execute(host, req3);
        verifyMocks();
    }
    @Test
    public void testPutToUriInvalidatesCacheForThatUri() throws Exception {
        HttpRequest req = makeRequestWithBody("PUT","/");
        testUnsafeOperationInvalidatesCacheForThatUri(req);
    }
    @Test
    public void testDeleteToUriInvalidatesCacheForThatUri() throws Exception {
        HttpRequest req = new BasicHttpRequest("DELETE","/");
        testUnsafeOperationInvalidatesCacheForThatUri(req);
    }
    @Test
    public void testPostToUriInvalidatesCacheForThatUri() throws Exception {
        HttpRequest req = makeRequestWithBody("POST","/");
        testUnsafeOperationInvalidatesCacheForThatUri(req);
    }
    protected void testUnsafeMethodInvalidatesCacheForHeaderUri(
            HttpRequest unsafeReq) throws Exception, IOException {
        HttpRequest req1 = new BasicHttpRequest("GET", "/content", HTTP_1_1);
        HttpResponse resp1 = make200Response();
        resp1.setHeader("Cache-Control","public, max-age=3600");
        backendExpectsAnyRequest().andReturn(resp1);
        HttpResponse resp2 = new BasicHttpResponse(HTTP_1_1, HttpStatus.SC_NO_CONTENT, "No Content");
        backendExpectsAnyRequest().andReturn(resp2);
        HttpRequest req3 = new BasicHttpRequest("GET", "/content", HTTP_1_1);
        HttpResponse resp3 = make200Response();
        resp3.setHeader("Cache-Control","public, max-age=3600");
        // this origin request MUST happen due to invalidation
        backendExpectsAnyRequest().andReturn(resp3);
        replayMocks();
        impl.execute(host, req1);
        impl.execute(host, unsafeReq);
        impl.execute(host, req3);
        verifyMocks();
    }
    protected void testUnsafeMethodInvalidatesCacheForUriInContentLocationHeader(
            HttpRequest unsafeReq) throws Exception, IOException {
        unsafeReq.setHeader("Content-Location","http://foo.example.com/content");
        testUnsafeMethodInvalidatesCacheForHeaderUri(unsafeReq);
    }
    protected void testUnsafeMethodInvalidatesCacheForRelativeUriInContentLocationHeader(
            HttpRequest unsafeReq) throws Exception, IOException {
        unsafeReq.setHeader("Content-Location","/content");
        testUnsafeMethodInvalidatesCacheForHeaderUri(unsafeReq);
    }
    protected void testUnsafeMethodInvalidatesCacheForUriInLocationHeader(
            HttpRequest unsafeReq) throws Exception, IOException {
        unsafeReq.setHeader("Location","http://foo.example.com/content");
        testUnsafeMethodInvalidatesCacheForHeaderUri(unsafeReq);
    }
    @Test
    public void testPutInvalidatesCacheForThatUriInContentLocationHeader() throws Exception {
        HttpRequest req2 = makeRequestWithBody("PUT","/");
        testUnsafeMethodInvalidatesCacheForUriInContentLocationHeader(req2);
    }
    @Test
    public void testPutInvalidatesCacheForThatUriInLocationHeader() throws Exception {
        HttpRequest req = makeRequestWithBody("PUT","/");
        testUnsafeMethodInvalidatesCacheForUriInLocationHeader(req);
    }
    @Test
    public void testPutInvalidatesCacheForThatUriInRelativeContentLocationHeader() throws Exception {
        HttpRequest req = makeRequestWithBody("PUT","/");
        testUnsafeMethodInvalidatesCacheForRelativeUriInContentLocationHeader(req);
    }
    @Test
    public void testDeleteInvalidatesCacheForThatUriInContentLocationHeader() throws Exception {
        HttpRequest req = new BasicHttpRequest("DELETE","/");
        testUnsafeMethodInvalidatesCacheForUriInContentLocationHeader(req);
    }
    @Test
    public void testDeleteInvalidatesCacheForThatUriInRelativeContentLocationHeader() throws Exception {
        HttpRequest req = new BasicHttpRequest("DELETE","/");
        testUnsafeMethodInvalidatesCacheForRelativeUriInContentLocationHeader(req);
    }
    @Test
    public void testDeleteInvalidatesCacheForThatUriInLocationHeader() throws Exception {
        HttpRequest req = new BasicHttpRequest("DELETE","/");
        testUnsafeMethodInvalidatesCacheForUriInLocationHeader(req);
    }
    @Test
    public void testPostInvalidatesCacheForThatUriInContentLocationHeader() throws Exception {
        HttpRequest req = makeRequestWithBody("POST","/");
        testUnsafeMethodInvalidatesCacheForUriInContentLocationHeader(req);
    }
    @Test
    public void testPostInvalidatesCacheForThatUriInLocationHeader() throws Exception {
        HttpRequest req = makeRequestWithBody("POST","/");
        testUnsafeMethodInvalidatesCacheForUriInLocationHeader(req);
    }
    @Test
    public void testPostInvalidatesCacheForRelativeUriInContentLocationHeader() throws Exception {
        HttpRequest req = makeRequestWithBody("POST","/");
        testUnsafeMethodInvalidatesCacheForRelativeUriInContentLocationHeader(req);
    }
    /* "In order to prevent denial of service attacks, an invalidation based on the URI
     *  in a Location or Content-Location header MUST only be performed if the host part
     *  is the same as in the Request-URI."
     *
     *  http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.10
     */
    protected void testUnsafeMethodDoesNotInvalidateCacheForHeaderUri(
            HttpRequest unsafeReq) throws Exception, IOException {
        HttpHost otherHost = new HttpHost("bar.example.com");
        HttpRequest req1 = new BasicHttpRequest("GET", "/content", HTTP_1_1);
        HttpResponse resp1 = make200Response();
        resp1.setHeader("Cache-Control","public, max-age=3600");
        backendExpectsAnyRequest().andReturn(resp1);
        HttpResponse resp2 = new BasicHttpResponse(HTTP_1_1, HttpStatus.SC_NO_CONTENT, "No Content");
        backendExpectsAnyRequest().andReturn(resp2);
        HttpRequest req3 = new BasicHttpRequest("GET", "/content", HTTP_1_1);
        replayMocks();
        impl.execute(otherHost, req1);
        impl.execute(host, unsafeReq);
        impl.execute(otherHost, req3);
        verifyMocks();
    }
    protected void testUnsafeMethodDoesNotInvalidateCacheForUriInContentLocationHeadersFromOtherHosts(
            HttpRequest unsafeReq) throws Exception, IOException {
        unsafeReq.setHeader("Content-Location","http://bar.example.com/content");
        testUnsafeMethodDoesNotInvalidateCacheForHeaderUri(unsafeReq);
    }
    protected void testUnsafeMethodDoesNotInvalidateCacheForUriInLocationHeadersFromOtherHosts(
            HttpRequest unsafeReq) throws Exception, IOException {
        unsafeReq.setHeader("Location","http://bar.example.com/content");
        testUnsafeMethodDoesNotInvalidateCacheForHeaderUri(unsafeReq);
    }
    protected HttpRequest makeRequestWithBody(String method, String requestUri) {
        HttpEntityEnclosingRequest request =
            new BasicHttpEntityEnclosingRequest(method, requestUri, HTTP_1_1);
        int nbytes = 128;
        request.setEntity(HttpTestUtils.makeBody(nbytes));
        request.setHeader("Content-Length",""+nbytes);
        return request;
    }
    @Test
    public void testPutDoesNotInvalidateCacheForUriInContentLocationHeadersFromOtherHosts() throws Exception {
        HttpRequest req = makeRequestWithBody("PUT","/");
        testUnsafeMethodDoesNotInvalidateCacheForUriInContentLocationHeadersFromOtherHosts(req);
    }
    @Test
    public void testPutDoesNotInvalidateCacheForUriInLocationHeadersFromOtherHosts() throws Exception {
        HttpRequest req = makeRequestWithBody("PUT","/");
        testUnsafeMethodDoesNotInvalidateCacheForUriInLocationHeadersFromOtherHosts(req);
    }
    @Test
    public void testPostDoesNotInvalidateCacheForUriInContentLocationHeadersFromOtherHosts() throws Exception {
        HttpRequest req = makeRequestWithBody("POST","/");
        testUnsafeMethodDoesNotInvalidateCacheForUriInContentLocationHeadersFromOtherHosts(req);
    }
    @Test
    public void testPostDoesNotInvalidateCacheForUriInLocationHeadersFromOtherHosts() throws Exception {
        HttpRequest req = makeRequestWithBody("POST","/");
        testUnsafeMethodDoesNotInvalidateCacheForUriInLocationHeadersFromOtherHosts(req);
    }
    @Test
    public void testDeleteDoesNotInvalidateCacheForUriInContentLocationHeadersFromOtherHosts() throws Exception {
        HttpRequest req = new BasicHttpRequest("DELETE","/",HTTP_1_1);
        testUnsafeMethodDoesNotInvalidateCacheForUriInContentLocationHeadersFromOtherHosts(req);
    }
    @Test
    public void testDeleteDoesNotInvalidateCacheForUriInLocationHeadersFromOtherHosts() throws Exception {
        HttpRequest req = new BasicHttpRequest("DELETE","/",HTTP_1_1);
        testUnsafeMethodDoesNotInvalidateCacheForUriInLocationHeadersFromOtherHosts(req);
    }
