 import org.apache.http.HttpVersion;
import org.apache.http.client.methods.HttpGet;
    public void testExtractsUriFromAbsoluteUriInRequest() {
        HttpHost host = new HttpHost("bar.example.com");
        HttpRequest req = new HttpGet("http://foo.example.com/");
        Assert.assertEquals("http://foo.example.com:80/", extractor.getURI(host, req));
    }
    @Test
        Assert.assertEquals("http://www.comcast.net:80/", extractor.getURI(new HttpHost(
        Assert.assertEquals("http://www.fancast.com:80/full_episodes", extractor.getURI(new HttpHost(
        Assert.assertEquals("https://www.comcast.net:443/", extractor.getURI(new HttpHost(
        Assert.assertEquals("http://www.comcast.net:80/?foo=bar", extractor.getURI(new HttpHost(
        Assert.assertEquals("http://www.fancast.com:80/full_episodes?foo=bar", extractor.getURI(
    /*
     * "When comparing two URIs to decide if they match or not, a client
     * SHOULD use a case-sensitive octet-by-octet comparison of the entire
     * URIs, with these exceptions:
     * - A port that is empty or not given is equivalent to the default
     * port for that URI-reference;
     * - Comparisons of host names MUST be case-insensitive;
     * - Comparisons of scheme names MUST be case-insensitive;
     * - An empty abs_path is equivalent to an abs_path of "/".
     * Characters other than those in the 'reserved' and 'unsafe' sets
     * (see RFC 2396 [42]) are equivalent to their '"%" HEX HEX' encoding."
     *
     * http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.3
     */
    @Test
    public void testEmptyPortEquivalentToDefaultPortForHttp() {
        HttpHost host1 = new HttpHost("foo.example.com:");
        HttpHost host2 = new HttpHost("foo.example.com:80");
        HttpRequest req = new BasicHttpRequest("GET", "/", HttpVersion.HTTP_1_1);
        Assert.assertEquals(extractor.getURI(host1, req), extractor.getURI(host2, req));
    }
    @Test
    public void testEmptyPortEquivalentToDefaultPortForHttps() {
        HttpHost host1 = new HttpHost("foo.example.com", -1, "https");
        HttpHost host2 = new HttpHost("foo.example.com", 443, "https");
        HttpRequest req = new BasicHttpRequest("GET", "/", HttpVersion.HTTP_1_1);
        final String uri1 = extractor.getURI(host1, req);
        final String uri2 = extractor.getURI(host2, req);
        Assert.assertEquals(uri1, uri2);
    }
    @Test
    public void testEmptyPortEquivalentToDefaultPortForHttpsAbsoluteURI() {
        HttpHost host = new HttpHost("foo.example.com", -1, "https");
        HttpGet get1 = new HttpGet("https://bar.example.com:/");
        HttpGet get2 = new HttpGet("https://bar.example.com:443/");
        final String uri1 = extractor.getURI(host, get1);
        final String uri2 = extractor.getURI(host, get2);
        Assert.assertEquals(uri1, uri2);
    }
    @Test
    public void testNotProvidedPortEquivalentToDefaultPortForHttpsAbsoluteURI() {
        HttpHost host = new HttpHost("foo.example.com", -1, "https");
        HttpGet get1 = new HttpGet("https://bar.example.com/");
        HttpGet get2 = new HttpGet("https://bar.example.com:443/");
        final String uri1 = extractor.getURI(host, get1);
        final String uri2 = extractor.getURI(host, get2);
        Assert.assertEquals(uri1, uri2);
    }
    @Test
    public void testNotProvidedPortEquivalentToDefaultPortForHttp() {
        HttpHost host1 = new HttpHost("foo.example.com");
        HttpHost host2 = new HttpHost("foo.example.com:80");
        HttpRequest req = new BasicHttpRequest("GET", "/", HttpVersion.HTTP_1_1);
        Assert.assertEquals(extractor.getURI(host1, req), extractor.getURI(host2, req));
    }
    @Test
    public void testHostNameComparisonsAreCaseInsensitive() {
        HttpHost host1 = new HttpHost("foo.example.com");
        HttpHost host2 = new HttpHost("FOO.EXAMPLE.COM");
        HttpRequest req = new BasicHttpRequest("GET", "/", HttpVersion.HTTP_1_1);
        Assert.assertEquals(extractor.getURI(host1, req), extractor.getURI(host2, req));
    }
    @Test
    public void testSchemeNameComparisonsAreCaseInsensitive() {
        HttpHost host1 = new HttpHost("foo.example.com", -1, "http");
        HttpHost host2 = new HttpHost("foo.example.com", -1, "HTTP");
        HttpRequest req = new BasicHttpRequest("GET", "/", HttpVersion.HTTP_1_1);
        Assert.assertEquals(extractor.getURI(host1, req), extractor.getURI(host2, req));
    }
    @Test
    public void testEmptyAbsPathIsEquivalentToSlash() {
        HttpHost host = new HttpHost("foo.example.com");
        HttpRequest req1 = new BasicHttpRequest("GET", "/", HttpVersion.HTTP_1_1);
        HttpRequest req2 = new HttpGet("http://foo.example.com");
        Assert.assertEquals(extractor.getURI(host, req1), extractor.getURI(host, req2));
    }
    @Test
    public void testEquivalentPathEncodingsAreEquivalent() {
        HttpHost host = new HttpHost("foo.example.com");
        HttpRequest req1 = new BasicHttpRequest("GET", "/~smith/home.html", HttpVersion.HTTP_1_1);
        HttpRequest req2 = new BasicHttpRequest("GET", "/%7Esmith/home.html", HttpVersion.HTTP_1_1);
        Assert.assertEquals(extractor.getURI(host, req1), extractor.getURI(host, req2));
    }
    @Test
    public void testEquivalentExtraPathEncodingsAreEquivalent() {
        HttpHost host = new HttpHost("foo.example.com");
        HttpRequest req1 = new BasicHttpRequest("GET", "/~smith/home.html", HttpVersion.HTTP_1_1);
        HttpRequest req2 = new BasicHttpRequest("GET", "/%7Esmith%2Fhome.html", HttpVersion.HTTP_1_1);
        Assert.assertEquals(extractor.getURI(host, req1), extractor.getURI(host, req2));
    }
