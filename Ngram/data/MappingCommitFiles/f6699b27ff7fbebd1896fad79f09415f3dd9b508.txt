             <listitem>
                <formalpara>
                    <title>'http.auth.auth-cache':</title>
                    <para><interfacename>AuthCache</interfacename> instance representing the actual
                        authentication data cache. The value of this attribute set in the local 
                        context takes precedence over the default one.</para>
                </formalpara>
            </listitem>
        <title>Caching of authentication data</title>
        <para>As of version 4.1 HttpClient automatically caches information about hosts it 
            successfully authenticated with. Please note that one must use the same execution 
            context to execute logically related requests in order for cached authentication data
            to propagate from one request to another. Authentication data will be lost as soon as 
            the execution context goes out of scope.</para>
    </section>
    <section>
            environment.</para>
        <para>Nonethess one can configure HttpClient to authenticate preemptively by prepopulating
            the authentication data cache.</para>
HttpHost targetHost = new HttpHost("localhost", 80, "http"); 
httpclient.getCredentialsProvider().setCredentials(
        new AuthScope(targetHost.getHostName(), targetHost.getPort()), 
        new UsernamePasswordCredentials("username", "password"));
// Create AuthCache instance
AuthCache authCache = new BasicAuthCache();
// Generate BASIC scheme object and add it to the local auth cache
BasicScheme basicAuth = new BasicScheme();
authCache.put(targetHost, basicAuth);
// Add AuthCache to the execution context
BasicHttpContext localcontext = new BasicHttpContext();
localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);        
HttpGet httpget = new HttpGet("/");
for (int i = 0; i < 3; i++) {
    HttpResponse response = httpclient.execute(targetHost, httpget, localcontext);
    HttpEntity entity = response.getEntity();
    if (entity != null) {
        entity.consumeContent();
    }
