     /**
     * The tunnelling type of a route.
     * Plain routes are established by connecting to the target or
     * the first proxy.
     * Tunnelled routes are established by connecting to the first proxy
     * and tunnelling through all proxies to the target.
     * Routes without a proxy cannot be tunnelled.
     */
    public enum TunnelType { PLAIN, TUNNELLED };
    /**
     * The layering type of a route.
     * Plain routes are established by connecting or tunnelling.
     * Layered routes are established by layering a protocol such as TLS/SSL
     * over an existing connection.
     * Protocols can only be layered over a tunnel to the target, or
     * or over a direct connection without proxies.
     * <br/>
     * Layering a protocol
     * over a direct connection makes little sense, since the connection
     * could be established with the new protocol in the first place.
     * But we don't want to exclude that use case.
     */
    public enum LayerType  { PLAIN, LAYERED };
    private final TunnelType tunnelled;
    private final LayerType layered;
     * @param tunnelled the tunnel type of this route
     * @param layered   the layering type of this route
    private HttpRoute(InetAddress local,
                      HttpHost target, HttpHost[] proxies,
                      boolean secure,
                      TunnelType tunnelled, LayerType layered) {
        if ((tunnelled == TunnelType.TUNNELLED) && (proxies == null)) {
     * @param tunnelled the tunnel type of this route
     * @param layered   the layering type of this route
     */
    public HttpRoute(HttpHost target, InetAddress local, HttpHost[] proxies,
                     boolean secure, TunnelType tunnelled, LayerType layered) {
        this(local, target, toChain(proxies), secure, tunnelled, layered);
    }
    /**
     * Creates a new route with all attributes specified explicitly.
     *
     * @param target    the host to which to route
     * @param local     the local address to route from, or
     *                  <code>null</code> for the default
     * @param proxies   the proxy chain to use, or
     *                  <code>null</code> for a direct route
     * @param secure    <code>true</code> if the route is (to be) secure,
     *                  <code>false</code> otherwise
     *
     * @deprecated use enums instead of boolean for 'tunnelled' and 'layered'
        this(local, target, toChain(proxies), secure,
             tunnelled ? TunnelType.TUNNELLED : TunnelType.PLAIN,
             layered   ? LayerType.LAYERED    : LayerType.PLAIN);
                     boolean secure, TunnelType tunnelled, LayerType layered) {
     * Creates a new route with at most one proxy.
     *
     * @param target    the host to which to route
     * @param local     the local address to route from, or
     *                  <code>null</code> for the default
     * @param proxy     the proxy to use, or
     *                  <code>null</code> for a direct route
     * @param secure    <code>true</code> if the route is (to be) secure,
     *                  <code>false</code> otherwise
     * @param tunnelled the tunnel type of this route
     * @param layered   the layering type of this route
     *
     * @deprecated use enums instead of boolean for 'tunnelled' and 'layered'
     */
    public HttpRoute(HttpHost target, InetAddress local, HttpHost proxy,
                     boolean secure, boolean tunnelled, boolean layered) {
        this(local, target, toChain(proxy), secure,
             tunnelled ? TunnelType.TUNNELLED : TunnelType.PLAIN,
             layered   ? LayerType.LAYERED    : LayerType.PLAIN);
    }
    /**
        this(local, target, null, secure, TunnelType.PLAIN, LayerType.PLAIN);
        this(null, target, null, false, TunnelType.PLAIN, LayerType.PLAIN);
        this(local, target, toChain(proxy), secure,
             secure ? TunnelType.TUNNELLED : TunnelType.PLAIN,
             secure ? LayerType.LAYERED    : LayerType.PLAIN);
     * Obtains the tunnel type of this route.
     * If there is a proxy chain, only end-to-end tunnels are considered.
     *
     * @return  the tunnelling type
     */
    public final TunnelType getTunnelType() {
        return this.tunnelled;
    }
    /**
        return (this.tunnelled == TunnelType.TUNNELLED);
    }
    /**
     * Obtains the layering type of this route.
     * In the presence of proxies, only layering over an end-to-end tunnel
     * is considered.
     *
     * @return  the layering type
     */
    public final LayerType getLayerType() {
        return this.layered;
        return (this.layered == LayerType.LAYERED);
        hc ^= this.tunnelled.hashCode();
        hc ^= this.layered.hashCode();
        if (this.tunnelled == TunnelType.TUNNELLED)
        if (this.layered == LayerType.LAYERED)
