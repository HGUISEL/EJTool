 import java.net.UnknownHostException;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.http.conn.ConnectTimeoutException;
 * Default implementation of a {@link ClientConnectionOperator}. It uses a {@link SchemeRegistry} 
 * to look up {@link SchemeSocketFactory} objects.
 * <p>
 * This connection operator is multihome network aware and will attempt to retry failed connects 
 * against all known IP addresses sequentially until the connect is successful or all known 
 * addresses fail to respond. Please note the same 
 * {@link org.apache.http.params.CoreConnectionPNames#CONNECTION_TIMEOUT} value will be used 
 * for each connection attempt, so in the worst case the total elapsed time before timeout
 * can be <code>CONNECTION_TIMEOUT * n</code> where <code>n</code> is the number of IP addresses
 * of the given host. One can disable multihome support by overriding 
 * the {@link #resolveHostname(String)} method and returning only one IP address for the given
 * host name.
 *  <li>{@link org.apache.http.params.CoreConnectionPNames#CONNECTION_TIMEOUT}</li>
    private final Log log = LogFactory.getLog(getClass());
    public DefaultClientConnectionOperator(final SchemeRegistry schemes) {
            throw new IllegalArgumentException("Scheme registry amy not be null");
        this.schemeRegistry = schemes;
    public void openConnection(
            final OperatedClientConnection conn,
            final HttpHost target,
            final InetAddress local,
            final HttpContext context,
            final HttpParams params) throws IOException {
            throw new IllegalArgumentException("Connection may not be null");
            throw new IllegalArgumentException("Target host may not be null");
            throw new IllegalArgumentException("Parameters may not be null");
            throw new IllegalStateException("Connection must not be open");
        InetAddress[] addresses = resolveHostname(target.getHostName());
        for (int i = 0; i < addresses.length; i++) {
            InetAddress address = addresses[i];
            boolean last = i == addresses.length;
            
            Socket sock = sf.createSocket();
            conn.opening(sock, target);
            InetSocketAddress remoteAddress = new InetSocketAddress(address, port);
            InetSocketAddress localAddress = null;
            if (local != null) {
                localAddress = new InetSocketAddress(local, 0);
            if (this.log.isDebugEnabled()) {
                this.log.debug("Connecting to " + remoteAddress);
            }
            try {
                Socket connsock = sf.connectSocket(sock, remoteAddress, localAddress, params);
                if (sock != connsock) {
                    sock = connsock;
                    conn.opening(sock, target);
                }
                prepareSocket(sock, context, params);
                conn.openCompleted(sf.isSecure(sock), params);
                return;
            } catch (ConnectException ex) {
                if (last) {
                    throw new HttpHostConnectException(target, ex);
                }
            } catch (ConnectTimeoutException ex) {
                if (last) {
                    throw ex;
                }
            }
            if (this.log.isDebugEnabled()) {
                this.log.debug("Connect to " + remoteAddress + " timed out. " +
                		"Connection will be retried using another IP address");
            }
    public void updateSecureConnection(
            final OperatedClientConnection conn,
            final HttpHost target,
            final HttpContext context,
            final HttpParams params) throws IOException {
            throw new IllegalArgumentException("Connection may not be null");
            throw new IllegalArgumentException("Target host may not be null");
            throw new IllegalArgumentException("Parameters may not be null");
            throw new IllegalStateException("Connection must be open");
    protected void prepareSocket(
            final Socket sock, 
            final HttpContext context,
            final HttpParams params) throws IOException {
    /**
     * Resolves the given host name to an array of corresponding IP addresses, based on the 
     * configured name service on the system.
     * 
     * @param host host name to resolve
     * @return array of IP addresses
     * @exception  UnknownHostException  if no IP address for the host could be determined. 
     * 
     * @since 4.1
     */
    protected InetAddress[] resolveHostname(final String host) throws UnknownHostException {
        return InetAddress.getAllByName(host);
    }
    
