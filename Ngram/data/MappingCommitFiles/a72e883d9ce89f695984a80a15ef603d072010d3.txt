 import org.apache.http.conn.ClientConnectionRequest;
import org.apache.http.conn.routing.HttpRoute;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
    
    public void testAbortAfterRequestStarts() throws Exception {
        HttpParams params = createDefaultParams();
        HttpConnectionManagerParams.setMaxTotalConnections(params, 1);
        ThreadSafeClientConnManager mgr = createTSCCM(params, null);
        HttpHost target = new HttpHost("www.test.invalid", 80, "http");
        HttpRoute route = new HttpRoute(target, null, false);
        
        // get the only connection, then start an extra thread
        ManagedClientConnection conn = mgr.getConnection(route, 1L, TimeUnit.MILLISECONDS);
        ClientConnectionRequest request = mgr.newConnectionRequest();
        GetConnThread gct = new GetConnThread(request, route, 0L); // no timeout
        gct.start();
        Thread.sleep(100); // give extra thread time to block
        request.abortRequest();
        gct.join(10000);
        assertNotNull("thread should have gotten an exception",
                      gct.getException());
        assertSame("thread got wrong exception",
                   InterruptedException.class,
                   gct.getException().getClass());
        // make sure the manager is still working
        try {
            mgr.getConnection(route, 10L, TimeUnit.MILLISECONDS);
            fail("should have gotten a timeout");
        } catch (ConnectionPoolTimeoutException e) {
            // expected
        }
        mgr.releaseConnection(conn);
        // this time: no exception
        conn = mgr.getConnection(route, 10L, TimeUnit.MILLISECONDS);
        assertNotNull("should have gotten a connection", conn);
        mgr.shutdown();
    }
    
    public void testAbortBeforeRequestStarts() throws Exception {
        HttpParams params = createDefaultParams();
        HttpConnectionManagerParams.setMaxTotalConnections(params, 1);
        ThreadSafeClientConnManager mgr = createTSCCM(params, null);
        HttpHost target = new HttpHost("www.test.invalid", 80, "http");
        HttpRoute route = new HttpRoute(target, null, false);
        
        // get the only connection, then start an extra thread
        ManagedClientConnection conn = mgr.getConnection(route, 1L, TimeUnit.MILLISECONDS);
        ClientConnectionRequest request = mgr.newConnectionRequest();
        request.abortRequest();
        
        GetConnThread gct = new GetConnThread(request, route, 0L); // no timeout
        gct.start();
        Thread.sleep(100); // give extra thread time to block
        gct.join(10000);
        assertNotNull("thread should have gotten an exception",
                      gct.getException());
        assertSame("thread got wrong exception",
                   InterruptedException.class,
                   gct.getException().getClass());
        // make sure the manager is still working
        try {
            mgr.getConnection(route, 10L, TimeUnit.MILLISECONDS);
            fail("should have gotten a timeout");
        } catch (ConnectionPoolTimeoutException e) {
            // expected
        }
        mgr.releaseConnection(conn);
        // this time: no exception
        conn = mgr.getConnection(route, 10L, TimeUnit.MILLISECONDS);
        assertNotNull("should have gotten a connection", conn);
        mgr.shutdown();
    }
