 	private boolean revalidationResponseIsTooOld(HttpResponse backendResponse,
			HttpCacheEntry cacheEntry) {
        final Header entryDateHeader = cacheEntry.getFirstHeader("Date");
        final Header responseDateHeader = backendResponse.getFirstHeader("Date");
        if (entryDateHeader != null && responseDateHeader != null) {
            try {
                Date entryDate = DateUtils.parseDate(entryDateHeader.getValue());
                Date respDate = DateUtils.parseDate(responseDateHeader.getValue());
                if (respDate.before(entryDate)) return true;
            } catch (DateParseException e) {
                // either backend response or cached entry did not have a valid
                // Date header, so we can't tell if they are out of order
                // according to the origin clock; thus we can skip the
                // unconditional retry recommended in 13.2.6 of RFC 2616.
            }
        }
		return false;
	}
    
        if (revalidationResponseIsTooOld(backendResponse, matchedEntry)) {
        	HttpRequest unconditional = conditionalRequestBuilder
        		.buildUnconditionalRequest(request, matchedEntry);
        	return callBackend(target, unconditional, context);
        
    	HttpRequest conditionalRequest = conditionalRequestBuilder.buildConditionalRequest(request, cacheEntry);
        if (revalidationResponseIsTooOld(backendResponse, cacheEntry)) {
        	HttpRequest unconditional = conditionalRequestBuilder
        		.buildUnconditionalRequest(request, cacheEntry);
        	requestDate = getCurrentDate();
        	backendResponse = backend.execute(target, unconditional, context);
        	responseDate = getCurrentDate();
